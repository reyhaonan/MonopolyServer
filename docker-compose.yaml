version: "3.9"

services:
  app:
    build: .
    container_name: monopoly-app
    ports:
      - "5217:5217"
    environment:
      # Database (matches your appsettings.json structure)
      Database__Host: ${DB_HOST}
      Database__Port: ${DB_PORT}
      Database__Username: ${DB_USER}
      Database__Password: ${DB_PASS}
      Database__DatabaseName: ${DB_NAME}

      # Kafka
      Kafka__BootstrapServers: ${KAFKA_BOOTSTRAP}
      Kafka__ConsumerGroupId: ${KAFKA_GROUP}
      Kafka__GameEventsTopic: ${KAFKA_TOPIC_EVENTS}
      Kafka__GameControlTopic: ${KAFKA_TOPIC_CONTROL}
      Kafka__EnableAutoCommit: "false"

      # JWT & OAuth
      JWT__Issuer: ${JWT_ISSUER}
      JWT__Audience: ${JWT_AUDIENCE}
      JWT__Key: ${JWT_KEY}
      OAuth2__Discord__ClientId: ${DISCORD_CLIENT_ID}
      OAuth2__Discord__ClientSecret: ${DISCORD_CLIENT_SECRET}

    depends_on:
      - db
      - kafka

  db:
    image: postgres:16
    container_name: monopoly-db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - db-data:/var/lib/postgresql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-setup:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka-setup
    depends_on:
      - kafka
    entrypoint: ["/bin/bash", "-c"]
    command: |
      "
      kafka-topics --create --if-not-exists --topic ${KAFKA_TOPIC_EVENTS} --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 &&
      kafka-topics --create --if-not-exists --topic ${KAFKA_TOPIC_CONTROL} --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 &&
      sleep infinity
      "

volumes:
  db-data:
